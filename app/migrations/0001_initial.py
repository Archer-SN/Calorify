# Generated by Django 4.0.4 on 2023-07-01 10:51

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('weight', models.IntegerField(default=60)),
                ('height', models.IntegerField(default=170)),
                ('body_fat', models.FloatField(default=15)),
                ('year_born', models.DateField(default=datetime.datetime.now)),
                ('activity_level', models.FloatField(choices=[('1', 'None'), ('1.2', 'Sedentary'), ('1.35', 'Lightly Active'), ('1.5', 'Moderately Active'), ('1.9', 'Very Active')], default='1.2')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DailyEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_food', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('fdc_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=64)),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='FoodNutrientConversionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_nutrient_converter', to='app.food')),
            ],
        ),
        migrations.CreateModel(
            name='MeasureUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('unit_name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='UserFood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('daily_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_food', to='app.dailyentry')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_food', to='app.food')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('note', models.TextField()),
                ('foods', models.ManyToManyField(to='app.food')),
            ],
        ),
        migrations.CreateModel(
            name='FoodProteinConversionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('food_nutrient_cf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_protein_converter', to='app.foodnutrientconversionfactor')),
            ],
        ),
        migrations.CreateModel(
            name='FoodPortion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('portion_description', models.CharField(max_length=64)),
                ('gram_weight', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_portion', to='app.food')),
                ('measure_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_portion', to='app.measureunit')),
            ],
        ),
        migrations.CreateModel(
            name='FoodNutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField()),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_nutrient', to='app.food')),
                ('nutrient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_nutrient', to='app.nutrient')),
            ],
        ),
        migrations.CreateModel(
            name='FoodFatConversionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('food_nutrient_cf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_fat_converter', to='app.foodnutrientconversionfactor')),
            ],
        ),
        migrations.CreateModel(
            name='FoodCalorieConversionFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fat_value', models.FloatField(default=9)),
                ('protein_value', models.FloatField(default=4)),
                ('carbohydrate_value', models.FloatField(default=4)),
                ('food_nutrient_cf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='food_calorie_converter', to='app.foodnutrientconversionfactor')),
            ],
        ),
        migrations.AddField(
            model_name='food',
            name='food_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app.foodcategory'),
        ),
    ]
